# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
#  - Command: x2Many commands namespace
# To return an action, assign: action = {...}
existencias=env['product.supplierinfo'].search([])
nombre=''
if existencias:
  for ex in existencias:
    if ex.product_tmpl_id.es_paquete != True:
      materiales=env['mrp.bom.line'].search([('product_tmpl_id','=',ex.product_tmpl_id.id)])
      
      if materiales:
        for mat in materiales:
          paquete=env['product.supplierinfo'].search([('product_tmpl_id','=',mat.parent_product_tmpl_id.id)])
          if paquete:
            for paq in paquete:
              if ex.partner_id.id == paq.partner_id.id:
                # raise UserError(str(mat.parent_product_tmpl_id.name))
                paq.write({'price':ex.price})
              
              else:
                ex.create({
                  'product_tmpl_id':mat.parent_product_tmpl_id.id,
                  'partner_id':ex.partner_id.id,
                  'price':ex.price,
                  
                })
          else:
            ex.create({
              'product_tmpl_id':mat.parent_product_tmpl_id.id,
              'partner_id':ex.partner_id.id,
              'price':ex.price,
              
            })